1. Какие типы паттернов проектирования существуют?
•	Порождающие паттерны, предназначенные для создания новых объектов в системе.
•	Структурные паттерны, решающие задачи компоновки системы на основе классов и объектов.
•	Паттерны поведения, предназначенные для распределения обязанностей между объектами в системе.

2. Как можно улучшить Singleton при помощи trait-ов?
Можно сделать trait с реализацией Singleton и потом для классов, которые мы хотим реализовать как Singleton, только вставлять этот trait.

3. Как реализуется паттерн Фабричный метод? В чем его отличие от паттерна Фабрика?
Как я понял, Фабричный метод, это в асбстрактном классе или интерфейсе описан метод создания класса, который может переопределяться в наследниках под себя.
А фабрика, это объект нескольких таких методов, для создания семейств связанных объектов.

4. Объясните назначение и применение магических методов __get, __set, __isset, __unset, __call и __callStatic. Когда, как и почему их стоит использовать (или нет)?
Знал только методы:
__get – вызывается, когда пытаются считать несуществующее название свойство класс, передовая это название как параметр
__set - вызывается, когда пытаются изменить несуществующее название свойство, передовая название и значение, как параметры
Использовать их удобно, когда нужно объединить несколько гетеров и сеттеро с похожим кодом.
Прочитал про другие:
__isset – используется, чтобы при проверки несуществующего свойства, что-то сделать (например для методов реализованных через __get, при проверке можно сделать, чтобы isset говорил, что они есть)
_unset – метод, вызывающийся при попытке удаления несуществующее свойство(без него не получется удалить свойства через __get)
__call - вызывается, когда пытаются вызвать несуществующее метод класса, можно передавать метод от класса к классу
__callStatic – то же, что и __call, только для статичных методов

5. Опишите несколько структур данных из стандартной библиотеки PHP (SPL). Приведите примеры использования.
Слышал про:
•	SplDoublyLinkedList – двусвязный список, совокупность объектов, где у каждого есть ссылка на предыдущий и следующий объект в списке. Есть головной и последний объект.
Удобно, когда нужно часто удалять или добавлять новые объекты в список, достаточно просто изменить ссылки в объектах.
•	SplStack – стек, когда последний добавленный элемент в списке обрабатывается первым
•	SplQueue – очередь, когда первый добавленный элемент в список, обрабатывается первым.
Насколько я знаю, использование стеков и очередей обусловлено скоростью, т.е. быстрее извлечь крайний элемент, чем выдергивать его из середины списка.

6. Найдите все ошибки в коде:
interface MyInt {
public function funcI();
private function funcP();  // можно объявлять только публичные методы
}
class A {
protected prop1; //нет знака $
private prop2;  //нет знака $
function funcA(){  //не объявлен тип метода
return $this->prop2;
}
}
class B extends A {
function funcB(){
return $this->prop1;
}
}
class C extends B implements MyInt { // не объялен метод funcI из интерфейса
function funcB(){
return $this->prop1;
}
private function funcP(){
return 123;
}
}
$b = new B();
$b->funcA();
$c = new C();
$c->funcI();
